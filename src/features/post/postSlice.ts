import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchPosts } from './postAPI';


export type PostType = {
  userId: number,
  id: number,
  title: string,
  body: string,
}
export interface PostsState {
  value: number;
  posts: PostType[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: PostsState = {
  value: 0,
  posts: [],
  status: 'idle',
};


export const fetchPostsAsync = createAsyncThunk(
  'posts/fetchPosts',
  async () => {
    const response = await fetchPosts();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const postsSlice = createSlice({
  name: 'posts',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPostsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchPostsAsync.fulfilled, (state, action) => {
        state.status = 'idle'; // if you don't update the state, even the logs dont apear on console.
        console.log('mm 700')
      console.log(action.payload)
        state.posts = (action.payload);
      })
      .addCase(fetchPostsAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});



// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPosts = (state: RootState) => state.posts;



export default postsSlice.reducer;
